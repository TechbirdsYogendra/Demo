//
//  MessagesViewController.swift
//  iMessageDemo
//
//  Created by Yogendra on 6/20/18.
//  Copyright Â© 2018 Yogendra Singh. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    
    @IBOutlet weak var collectionView: UICollectionView!
    
    //MARK:- @Constants
    let mojis = [UIImage.init(named: "Bmoji1"),
                UIImage.init(named: "Bmoji2"),
                UIImage.init(named: "Bmoji3"),
                UIImage.init(named: "Bmoji1"),
                UIImage.init(named: "Bmoji2"),
                UIImage.init(named: "Bmoji3"),
                UIImage.init(named: "Bmoji1"),
                UIImage.init(named: "Bmoji2"),
                UIImage.init(named: "Bmoji3"),
                UIImage.init(named: "Bmoji1"),
                UIImage.init(named: "Bmoji2"),
                UIImage.init(named: "Bmoji3"),
                ]
    
    var stickers = [MSSticker]()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        //Confirm protocols and reload collection view.
        collectionView.delegate = self
        collectionView.dataSource = self
        collectionView.reloadData()
        
        //Load Stickers
        loadSticker()
    }
    
    //MARK:- Load, Create and Insert MSSticker.
    //Load the Stickers
    func loadSticker() -> Void {
        createSticker(asset: "Bmoji1", localizedDescription: "Bmoji1")
        createSticker(asset: "Bmoji2", localizedDescription: "Bmoji2")
        createSticker(asset: "Bmoji3", localizedDescription: "Bmoji3")
        createSticker(asset: "Bmoji1", localizedDescription: "Bmoji1")
        createSticker(asset: "Bmoji2", localizedDescription: "Bmoji2")
        createSticker(asset: "Bmoji3", localizedDescription: "Bmoji3")
        createSticker(asset: "Bmoji1", localizedDescription: "Bmoji1")
        createSticker(asset: "Bmoji2", localizedDescription: "Bmoji2")
        createSticker(asset: "Bmoji3", localizedDescription: "Bmoji3")
        createSticker(asset: "Bmoji1", localizedDescription: "Bmoji1")
        createSticker(asset: "Bmoji2", localizedDescription: "Bmoji2")
        createSticker(asset: "Bmoji3", localizedDescription: "Bmoji3")
    }
    
    //Create the Stickers
    func createSticker(asset: String, localizedDescription: String) {
        
        guard let stickerPath = Bundle.main.path(forResource: asset, ofType: "png") else {
            print("Could not create sticker path for", asset)
            return
        }
        let stickerUrl = URL(fileURLWithPath: stickerPath)
        var sticker: MSSticker!
        do {
            try sticker = MSSticker.init(contentsOfFileURL: stickerUrl, localizedDescription: localizedDescription)
            stickers.append(sticker)
        } catch  {
            print(error)
            return
        }
    }
    
    //Insert the Stickers to conversation.
    func insert(sticker: MSSticker) {
        
        //Get Active Conversation
        let conversation = self.activeConversation
        
        //Insert Sticker to conversation.
        conversation?.insert(sticker, completionHandler: { (error: Error?) in
            if error == nil {
                print("Sticker Inserted Successfully")
            }
        })
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
}

//MARK:- UICollectionViewDataSource, UICollectionViewDelegate and UICollectionViewDelegateFlowLayout methods.
extension MessagesViewController: UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return mojis.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "Cell", for: indexPath) as! MojiCollectionViewCell
            cell.imageView.image = mojis[indexPath.item]
            return cell
    }
}

extension MessagesViewController: UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if indexPath.item == 0 {
            return
        }
        self.requestPresentationStyle(.compact)
        let sticker  = stickers[indexPath.item]
        
        //Insert sticker to conversation.
        insert(sticker: sticker)
    }
}

extension MessagesViewController: UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: (view.frame.size.width)/3, height: (view.frame.size.width)/3)
    }
}
